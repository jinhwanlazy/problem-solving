snippet alglcs "LCS, longest common subsequence algorithm"
int LCS(const string& A, const string& B, string* trace=nullptr) 
{
	/*
	 * dp[i][j] := LCS(A[:i], B[:j])
	 */
	vector<vector<int>> dp(A.size()+1, vector<int>(B.size()+1, 0));
	for (int i = 1; i <= A.size(); ++i) {
		for (int j = 1; j <= B.size(); ++j) {
			if (A[i-1] == B[j-1]) {
				dp[i][j] = dp[i-1][j-1] + 1;
			}
			else {
				dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
			}
		}
	}
	
	if (trace != nullptr) {
		int i = A.size();
		int j = B.size();
		trace->clear();
		while (i > 0 && j > 0) {
			if (A[i-1] == B[j-1]) {
				trace->push_back(A[i-1]);
				i--;
				j--;
			}
			else if (dp[i-1][j] == dp[i][j]) {
				i--;
			}
			else if (dp[i][j-1] == dp[i][j]) {
				j--;
			}
		}
		reverse(trace->begin(), trace->end());
	}
	return dp.back().back();
}
endsnippet

snippet algfloodfill2d "2D flood fill"
int floodFill(vector<vector<int>>& grid, int src, int dst) {
	int count = 0;
	int h = grid.size();
	int w = grid[0].size();
	for (int i = 0; i < grid.size(); ++i) {
		for (int j = 0; j < grid[0].size(); ++j) {
			if (grid[i][j] != src) {
				continue;
			}
			count++;
			grid[i][j] = dst;
			queue<pair<int, int>> q;
			q.push({i, j});
			while (!q.empty()) {
				auto [i_, j_] = q.front(); q.pop();
				for (int k = 0; k < 4; ++k) {
					int ii = i_ + di[k];
					int jj = j_ + dj[k];
					if (0 <= ii && ii < h && 0 <= jj && jj < w && grid[ii][jj] == src) {
						grid[ii][jj] = dst;
						q.push({ii, jj});
					}
				}
			}
		}
	}
	return count;
}
endsnippet

