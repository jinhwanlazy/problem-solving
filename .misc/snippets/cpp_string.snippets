snippet algkmp "KMP, string search algorithm"
vector<size_t> kmpPartialMatch(const string& query){
		size_t m = query.size();
		vector<size_t> pi(m, 0);

		size_t begin = 1, matched = 0;
		
		while(begin + matched < m){
				if(query[begin + matched] == query[matched]){
						matched++;
						pi[begin + matched - 1] = matched;
				}
				else{
						if(matched == 0)
								begin++;
						else{
								begin += matched - pi[matched - 1];
								matched = pi[matched - 1];
						}
				}
		}
		return pi;
}

vector<size_t> kmp(const string& source, const string& query) {
	size_t n = source.size();
	size_t m = query.size();

	vector<size_t> res;
	vector<size_t> pi = kmpPartialMatch(query);

	size_t matched = 0;
	for (int i = 0; i < n; i++)
	{
		while (matched > 0 && source[i] != query[matched]) {
			matched = pi[matched - 1];
		}
		if (source[i] == query[matched])
		{
			matched++;
			if (matched == m)
			{
				res.push_back(i - m + 1);
				matched = pi[matched - 1];
			}
		}
	}

	return res;
}
endsnippet


snippet algpalindrome "Manaker's longest palindromic substring algorithm"
template <typename array_t>
class Manacher {
 public:
	Manacher(const array_t& s)
			: s_(2 * s.size() + 1, PADDING), radii_(2 * s.size() + 1, 0) {
		for (size_t i = 0; i < s.size(); ++i) {
			s_[2 * i + 1] = s[i];
		}
	}

	size_t solve() {
		size_t center = 0, radius = 0;
		while (center < s_.size()) {
			while (center - (radius + 1) >= 0 &&				 //
							center + (radius + 1) < s_.size() &&	//
							s_[center - (radius + 1)] == s_[center + (radius + 1)]) {
				radius++;
			}
			radii_[center] = radius;

			size_t right = center + 1;
			size_t maxRadius = radius;
			radius = 0;
			while (right <= center + maxRadius) {
				size_t left = center * 2 - right;
				size_t maxMirroredRadius = center + maxRadius - right;
				if (radii_[left] < maxMirroredRadius) {
					radii_[right++] = radii_[left];
				} else if (radii_[left] > maxMirroredRadius) {
					radii_[right++] = maxMirroredRadius;
				} else {
					radius = maxMirroredRadius;
					break;
				}
			}
			center = right;
		}
		return *max_element(radii_.begin(), radii_.end());
	}

 private:
	static constexpr typename array_t::value_type PADDING = 0;
	array_t s_;
	vector<size_t> radii_;
};
endsnippet
