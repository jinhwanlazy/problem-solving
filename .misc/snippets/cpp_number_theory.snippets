snippet algsieve "Sieve of Eratosthenes, finds all prime numbers in given range"
struct Sieve {
	Sieve(size_t max_size) : data_(max_size, true) {
		data_[0] = false;
		data_[1] = false;
		for (size_t i = 2; i < max_size; ++i) {
			if (!data_[i]) {
				continue;
			}
			for (size_t j = i * 2; j < max_size; j += i) {
				data_[j] = false;
			}
		}
	}
	
	bool isPrime(size_t i) {
		return data_[i];
	}
	
	vector<bool> data_;
};
endsnippet

snippet algmodpow "modulus pow"
template <typename T = unsigned long long>
T modPow(T base, T exp, T mod) {
	if (exp == 0) {
		return 1;
	}
	if (exp == 1) {
		return base % mod;
	}
	
	T res = modPow(base, exp / 2, mod);
	res = res * res;
	res %= mod;
	if (exp & 1) {
		res *= base;
		res %= mod;
	}
	return res;
}
endsnippet

snippet algxgcd "Extended euclidean algorithm"
template <typename T = long long> // xgcd
T xGCD(T a, T b, T& x, T& y) {
	if (a < b) {
		return xGCD(b, a, y, x);
	}
	if (b == 0) {
		x = 1; y = 0;
		return a;
	}
	T x_, y_, g = xGCD(b, a % b, x_, y_);
	x = y_;
	y = x_ - (a / b) * y_;
	return g;
}
endsnippet

snippet algprimetest "miller-labin primarily test"
bool isPrime(unsigned long long n) {
	using ULL = unsigned long long;
	if (n <= 1) return false;
	if (n <= 3) return true;
	if (n % 2 == 0) return false;

	int s = 0;
	ULL d = n - 1;
	while (d % 2 == 0) {
		s++;
		d >>= 1;
	}

	const auto _millerRabinTest = [n, s, d](ULL a) -> bool {
		ULL x = modPow(a, d, n);
		for (int i = 0; i < s; ++i) {
			ULL y = (x * x) % n;
			if (y == 1 && x != 1 && x != n - 1) 
				return false;
			x = y;
		}
		return x == 1;
	};

	vector<ULL> testSet;
	if (n < 2'047ull) testSet = {2};
	else if (n < 1'373'653ull) testSet = {2, 3};
	else if (n < 4'759'123'141ull) testSet = {2, 7, 61};
	else if (n < 341'550'071'728'321ull) testSet = {2, 3, 5, 7, 11, 13, 17};
	else testSet = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37};
	
	for (const auto a : testSet) {
		if (!_millerRabinTest(a)) {
			return false;
		}
	}
	return true;
}
endsnippet
